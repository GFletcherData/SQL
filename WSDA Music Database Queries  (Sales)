/***************************************************************************
                                                                           *
CREATED BY: Grace                                                          *
DATE: 2024                                                                 *
DESCRIPTION: WSDA Music Database Queries                                   *
                                                                           *
***************************************************************************/

/*Query for displaying the first and last names of customers*/
SELECT 
	FirstName AS [Customer First Name], 
	LastName AS "Customer Last Name",
	Email AS EMAIL
FROM 
	Customer
ORDER BY
	FirstName DESC,
	LastName ASC
LIMIT 10 /*Limiting to 10 rows*/;

/*How many customers purchased 2 songs at $.99 each?*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	total=1.98
ORDER BY
	InvoiceDate;
	
	
/*How many invoices are between $1.98 and $5.00?*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	total BETWEEN 1.98 AND 5.00
ORDER BY
	InvoiceDate;

/*How many invoices are exactly $1.98 or $3.96?*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	total IN(1.98,3.96)
ORDER BY
	InvoiceDate
	
/*How many invoices were billed to Brussels?*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	BillingCity = "Brussels"
ORDER BY
	InvoiceDate;
	
	
/*How many invoices were billed to Brussels, Paris, or Orlando?*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	BillingCity IN ("Brussels","Paris", "Orlando")
ORDER BY
	InvoiceDate;
	
	
/*How many invoices were billed in cities that start with B?*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	BillingCity LIKE 'B%'
ORDER BY
	InvoiceDate;

	/*How many invoices were billed in cities that have B anywhere in its name?*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	BillingCity LIKE '%B%'
ORDER BY
	InvoiceDate;
	
	/*How many invoices were billed on 2010-05-22 00:00:00? */
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	InvoiceDate='2010-05-22 00:00:00' /*This is how it's formatted in the table*/
ORDER BY
	InvoiceDate;
	
/*How many invoices were billed on 2010-05-22 (Without time)? */
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	DATE (InvoiceDate)='2010-05-22'
ORDER BY
	InvoiceDate;
	
/*Get all invoices that were billed after 2010-05-22 and have a total of less than $3.00 */
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	DATE(InvoiceDate)>'2010-05-22' AND Total<3.00
ORDER BY
	InvoiceDate;
	
/*Get all invoices greater than $1.98 from any billing city that starts with P or D*/
SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM 
	Invoice
WHERE 
	Total> 1.98 AND (BillingCity LIKE 'P%' OR BillingCity LIKE 'D%') /*PEMDAS - parentheses satisfied first*/
ORDER BY
	InvoiceDate;
	
/* Sales goal: get as many people as possible to spend between $7 and $15.

*Sales Categories*
Baseline Purchase - Between $.99 and %1.99
Low Purchase -  Between $2 and $6.99
Target Purchase - Between $7 and $15
Top Performer - Above $15 
*/

SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total,
	CASE /*creating categories*/
	WHEN total < 2.00 THEN 'Baseline Purchase'
	WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
	WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
	ELSE 'Top Performer'
	END AS PurchaseType  /* adding label purchase type, one word*/
FROM 
	Invoice
WHERE
	PurchaseType='Top Performer'
ORDER BY
	BillingCity;
	
/**************************************************************************************/

/*Inner Join*/

SELECT 
	*
FROM
	Invoice
INNER JOIN
	Customer
ON
	Invoice.CustomerId = Customer.CustomerId /*Joining on which variables. Tablename.variablename*/
ORDER BY
	Customer.CustomerId;
	


/*Aliases when joining- Look at both customer and invoice tables*/

SELECT 
	C.LastName,
	C.FirstName,
	I.InvoiceId,
	I.CustomerId,
	I.InvoiceDate,
	I.total
FROM
	Invoice AS I
INNER JOIN
	Customer AS C
ON
	I.CustomerId = C.CustomerId /*Joining on which variables. Tablename.variablename*/
ORDER BY
	C.CustomerId;
	
/*Inner joins only return matching records (overlapping venn diagram)
Left outer join vs right outer join depends on the order of tables listed.
Right outer joins not supported in SQLite-this one. Just reverse order for a right join in SQLite*/

/*What employees are responsible for the 10 highest individual sales? -Many joins*/
SELECT
	e.FirstName,
	e.LastName,
	e.EmployeeId,
	c.FirstName,
	c.LastName,
	c.SupportRepId,
	i.CustomerId,
	i.total
	
FROM
	Invoice AS i
INNER JOIN
	Customer AS c
ON
	i.CustomerId=c.CustomerId
INNER JOIN	
	Employee as e
ON 
	c.SupportRepId=e.EmployeeId
ORDER BY
	i.total DESC
LIMIT 10;
	
/**********************************************************************/
/*Functions*/

/*Creating a Mailing List of US Customers*/
/*Joining two fields, ||' '||=space in between, [] = creating alias*/
SELECT
	FirstName,
	LastName,
	Address,
	FirstName||' '||LastName||' '||Address||', '||City||' '||State||' '||PostalCode AS [Mailing Address]
FROM	
	Customer
WHERE
	Country='USA';

/*shorten postal codes*/
SELECT
	FirstName,
	LastName,
	Address,
	FirstName||' '||LastName||' '||Address||', '||City||' '||State||' '||PostalCode AS [Mailing Address],
	LENGTH(PostalCode),
	substr(PostalCode,1,5) AS [5-Digit Postal Code],
	upper(FirstName) AS [First name in all caps],
	lower (LastName) AS [Last name all lowercase]
FROM	
	Customer
WHERE
	Country='USA';
	
/*Calculate the ages of all employees, (Format we want, time)*/
SELECT 
	FirstName,
	LastName,
	BirthDate,
	strftime('%Y-%m-%d',BirthDate)AS [Birthdate no time code],
	strftime('%Y-%m-%d','now')- strftime('%Y-%m-%d',BirthDate)AS [AGE]
FROM	
	Employee;
	
/*What are the total all-time global sales?*/
SELECT 
	SUM(Total)AS[Total Sales],
	AVG(Total) AS [Average Sales],
	MAX(Total) AS [Max Sale],
	MIN(Total) AS [Min Sale],
	Count (*) AS [Sales Count] /*Count all rows*/
FROM
	Invoice;
	
/*Nesting functions*/
SELECT 
	SUM(Total)AS[Total Sales],
	round(AVG(Total),2) AS [Average Sales],
	MAX(Total) AS [Max Sale],
	MIN(Total) AS [Min Sale],
	Count (*) AS [Sales Count] 
FROM
	Invoice;

/*What are the average invoice totals by city?*/
SELECT
	BillingCity,
	round(AVG(total),2)
FROM	
	Invoice
GROUP BY
	BillingCity /*don't group by aggregates*/
ORDER BY
	BillingCity;
	

/*What are the average invoice totals by city for only cities that start with L?*/
SELECT
	BillingCity,
	round(AVG(total),2)
FROM	
	Invoice
WHERE	
	BillingCity LIKE 'L%'
GROUP BY
	BillingCity /*don't group by aggregates*/
ORDER BY
	BillingCity;
	


/*What are the average invoice totals that are greater than $5?*/
/*Can't use WHERE with aggregate (ex: AVG(total)*/
SELECT
	BillingCity,
	round(AVG(total),2)
FROM	
	Invoice
GROUP BY
	BillingCity /*don't group by aggregates*/
HAVING	
	AVG(total)>5.00
ORDER BY
	BillingCity;
	


/*What are the average invoice totals that are greater than $5 for cities starting with B?*/
SELECT
	BillingCity,
	round(AVG(total),2)
FROM	
	Invoice
WHERE	
	BillingCity LIKE 'B%'
GROUP BY
	BillingCity /*don't group by aggregates*/
HAVING	
	AVG(total)>5.00
ORDER BY
	BillingCity;
	

/*What are the average invoice totals by billing country and city?*/
SELECT
	BillingCountry,
	BillingCity,
	round(AVG(total),2)
FROM	
	Invoice
GROUP BY
	BillingCity, BillingCountry /*don't group by aggregates*/
ORDER BY
	BillingCountry;

/*********************************************************************************/
/*Nesting*/

/*Gather all data about invoices that are less than average*/

/*This gives the average total*/
SELECT
	round(AVG(total),2)
FROM	
	Invoice
/*****************************/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	Invoice
WHERE	
	Total<
		(select avg(total) from Invoice)
ORDER BY
	Total DESC;

	
/*How is each city performing against the global average sales?*/
SELECT	
	BillingCity,
	AVG(total) AS [City Average],
	(Select AVG(total) FROM Invoice)AS [Global Average]
FROM	
	Invoice
Group BY
	BillingCity
ORDER BY 
	BillingCity;

/*All invoices after a certain date*/

SELECT	
	InvoiceDate,
	BillingAddress,
	BillingCity
FROM
	Invoice
WHERE
	InvoiceDate>
(SELECT 
	InvoiceDate
FROM
	INVOICE
WHERE	
	InvoiceId=251);
	
	
/*Returning multiple values froma subquery*/
/*What other purchases happened on these dates*/
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity
FROM
	Invoice
WHERE	
	InvoiceDate IN 
(SELECT	
	InvoiceDate
FROM 
	Invoice
WHERE
	InvoiceId IN(251,252,254));
	
	
/*Which tracks are not selling?*/
SELECT	
	TrackId
FROM	
	InvoiceLine
ORDER BY
	TrackId;
	
	
/*nobody is buying track 7*/
/*If id is not on the track list after DISTInCT, it's not selling*/
SELECT	
	TrackId,
	Composer,
	Name
FROM
	Track
WHERE
	TrackId
	NOT IN
(SELECT	
	DISTINCT
	TrackId
FROM	
	InvoiceLine
ORDER BY
	TrackId);

/*views*/
/*Best practice -> start view name with V*/
CREATE VIEW V_AvgTotal AS
SELECT
	round(AVG(total),2) AS [Average Total]
FROM	
	Invoice;

/*View as joins*/

CREATE VIEW V_Tracks_InvoiceLine AS
SELECT
	il.InvoiceId,
	il.UnitPrice,
	il.Quantity,
	t.Name,
	t.Composer,
	t.Milliseconds
FROM
	InvoiceLine il
INNER JOIN
	Track t
ON
	il.TrackId=t.TrackId;
	
/*Deleting View*/

DROP VIEW 
	V_AvgTotal;
	
	
/**********************************************************************/
/*Adding Modifying and Deleting*/
/*INSERT,UPDATE,and DELETE*/

/*Inserting into a table*/
/*Table(column)*/
INSERT INTO	
	Artist(Name)
VALUES ('Bobbi');
/*Name is nvarchar so must use single quotes*/


/*I want to change the artist name I just entered. Bobbi has ID of 276*/
/*Must use Where clause or else everything in table will be deleted*/
UPDATE 
	Artist
SET NAME='Bubba'
WHERE	
	ArtistId=276;
	
	
/*WSDA Music wants us to delete Bubba*/
/*Must use Where clause or else everything in table will be deleted*/

DELETE FROM
	Artist
WHERE 
	ArtistId=276;
